1. pasrseInt(); => inputan user akan jadi Integer = prompt('');
2. Math.random(); => membangkitkan bilangan random dari 0 - 1
3. Math.floor(); => Cara pakai -> Math.floor(Math.random() * 10) + 1;
    Membulatkan kepada nilai yang lebih rendah
4. charAt(); => untuk menampilkan karakter pada Javascript => cara pakai 
    var nama = "Sofyan Tanjung";
    console.log(nama.charAt(5)); = n (karena mulai index 0)
5. .length => untuk menangkap panjang String (caracter) jumlah elementnya beda dengan index pasti lebih 1 length nya
6. arguments => menangkap argument yang dikirim ke parameter
    cara pakai :
    function tambah(){
        var hasil = 0;
        for(var i = 0; i < arguments.length; i++){
            hasil += arguments[i];
        }
        return hasil;
    }
    console.log(tambah(5,10));
7. window. => mengacu kepada global scope
8. "use strict"; => mencegah agar function scope membuat variable di global secara otomatis
9. .join() => adalah method yang menggabungkan seluruh isi array dan mengubahnya jadi sebuah string , kalau tidak mau ada pemisahnya koma , mkaa bisa di isi dalam kurung buka dan tutup dengan '-' harus dibungkus dengan string  
10. .push => menambah atau mendorong ke array terakhir dari sebuah array bisa       banyak elementnya
arr.push('Dony' , 'Fitri');
11. .pop => menghilangkan element terakhir dari array , harus satu satu jika ingin menghapus tidak bisa sekaligus
arr.pop();
12. unshift => menambah atau mendorong ke array pertama dari sebuah array bisa banyak element nya 
arr.unshift('awal' , 'akhir');
13. shift => menghilangkan element pertama dari array , harus satu persatu
arr.shift();
arr.shift();    
console.log(arr.join());
14. setInterval(function() {
    
}, interval);  => adalah fungsi melakukan sesuatu selama berulang ulang selamat 
waktu interval berlangsung kita bisa memasukkan waktunya di akhir },
dengan angka , 1000 artinya 1 detik 100 aritnya 0,1 detik atau cara pakai =>
setInterval(function(){
    imgComputer.setAttribute('src', '../' + gambar[i++] + '.jpg');
    if(i == gambar.length) return i = 0;
}, 

15. new Date().getTime(); => untuk mendapatkan waktu saat ini saat di jalankan
16. clearInterval => memberhentikan waktunya
17. setTimeout(() => {
    
}, timeout); => menunggu dulu dengna menset timeoutnya , jika 1000 artinya 1detik 

18. Array.from() => artinya kita mengubah nodelist menajdi array / arguments menjadi array
19. .textContent => untuk mendapatkan text di HTML 
20. includes('JAVASCRIPT LANJUTAN'); => tulisan didalamnya terdapat apa? gitu 
21. .dataset => mengambil datanya dilanjutkan nama data nya .duration
<li data-duration="15:27">Teknik Pomodoro</li>   <== contoh attributnya 
22. .split(); => menghilangkan value : di element array 
.map(waktu => {
    // kita ubah 10:30 -> [10,30] = namanya di .split 
    const parts = waktu.split(':');
        // Kita coba hialngkan : dengan menggunakan method .split();
    return parts;
})
23. .parseFloat(); => sama dengan parseInt mengubah nilai jadi int bedanya jika bilangannya sudah int maka parse float akan ubah jadi desimal , dan jika bilangannya mengandung desimal maka akan ditampilkan semua nilainya


    .map() membuat array baru 
    .forEach() Tidak membuat array baru , jika kita buat 2 parameter maka parameter pertama untuk value dan ke dua untuk key nya atua indexnya

24. .entries() -> sebuah method yang bisa menampilkan sebuah index di for OF 
    cara pakai =>
    // Menggunakan method dan kurung siku destructuring assignment
    const lop = ['sandhika','doddy','erik'];
    for(const [s,w] of lop.entries()){
        console.log(`${s} adalah mahasiswa ke- ${w + 1}`);
    }
25.  XMLHttpRequest(); -> object ajax 
26.  $.ajax({

}); => adalah method ajax
27. mycanvas.getContext( '2d'); -> ada 3d juga untuk manipulasi canvas
const c = mycanvas.getContext('2d');
c.fillRect(25,25,100,100); <- untuk membuat lingkaran lebih lanjutnya baca di HTML5 Tentang canvas 

        arguments => bukan sebuah array tapi object
28. .reset(); -> untuk mereset formnya    
                    // Method pada array
    // 1. .length
    // 2. .join()
        var arr = ['roof' , 'chair' ,'stree'];
        // 3. push => menambah atau mendorong ke array terakhir dari sebuah array bisa banyak elementnya
        arr.push('Dony' , 'Fitri');
        // 4. pop => menghilangkan element terakhir dari array , harus satu satu jika ingin menghapus tidak bisa sekaligus
        arr.pop();
        // 5. unshift => menambah atau mendorong ke array pertama dari sebuah array bisa banyak element nya 
        arr.unshift('awal' , 'akhir');
        // 6. shift => menghilangkan element pertama dari array , harus satu persatu
        arr.shift();
        arr.shift();    
        console.log(arr.join());
        // 7. slice => mengiris array digunakan ketika ingin mengambil beberapa bagian pada array untuk menjadi array yang baru
                // Contekan slice(awal,akhir dikurangi -1)
        var baru = arr.slice(1,3);  
        console.log(baru.join('-'));              
                // Ctt: slice menghasilkan array Baru
        // 8. splice => menyambung atau menambal menyisipkan elemen di tengah tengah element array
                // Contekan splice(indexAwal, maudihapusBerapa, elementBaru1 , elemenBaru2)
        arr.splice(2,0, 'elemenBaru1' , 'elemenBaru2');
            // Menghapus element itu dimulai dari index yang dipilih dan dihitung dari index yang dipilih contoh
        arr.splice(2,1,);            

        // 9. forEach => digunakan untuk melakukan looping pada array tapi ini lebih keren dari pada for biasa , dengan menggunakan kedua method ini kita bisa melakukan sesuatu kepada element element yang ada didalam arraynya
            // Contoh cara pakainya ada dibawah 

        // 10. map =>  sama seperti forEach tapi map lebih baik karena , map ini mengembalikan array sedangkan forEach tidak
            // Contoh map
        var elementangka = [1,10,20,2,4,12,9];
            var angka2 = elementangka.map(function(e){
               return e * 2;
            });
            console.log(angka2.join('-'));

                        // COntoh lain menggunakan map
     const angka = [-1 , 8 , 9 , 1 , 4 , -5 , -4 , 3 , 2 , 9];
const baru = [];
    // lebih besar sama dengan 3 dan array baru 
for(let i = 0; i <= angka.length; i++ ){
        if( angka[i] >= 3){
            baru.push(angka[i]);
        }
    }
    console.log(baru.join('-'));

            // COntoh lainnya lagi
            let mahasiswa2 = ['Sandhika Galih' , 'Doddy Ferdiansyah' , 'Erik Tohir'];
            let jumlahAngka = mahasiswa2.map(nama => ({ nama:nama, jumlhhuruff:nama.length }));
            console.table(jumlahAngka);



            bisa juma memetakan karakter dari sebuah string dengan map 
            caranya : =>
                let mahasiswa = ['Sandhika Galih' , 'Doddy Ferdiansyah' , 'Erik'];
                let jumlahHuruf = mahasiswa.map(function(nama){
                    return nama.length
                });
                console.log(jumlahHuruf); => harus dalam keadaan object jangan dijalankan karena kalau di jalankan () akan erorr karena kita mengem
                balikannya dalam bentuk array bukan object
                    // Ctt: benar benar menghilangkan elemtnnya tidak mengubah jadi undefined
                    <== Object.Create() ==>
                    adalah salah satu cara untuk membuat sebuah Object == {}; dan bedanya dengan Object
                    .create() kita bisa menyimpan parameter didalamnya yang mengacu ke parent objectnya
                    atau seperti pewarisan , jadi dengan memasukkan argument kedalam parameter 
                    Object.create(); kita bisa mewariskan apapun yang dimiliki argumen yang ktia 
                    masukkan

console.dir(); =>menampilkan object        

.reverse => fungsinya sebagai method di array menghitung dari belakang ke depan

                undefined di ++ jadinya nan

                    // Cara cepat balikan angka 
                let a = 19;
                let b = 29;
                
                    [a,b] = [b,a];
                    console.log(a);
                    console.log(b);

                    // cara manual balikkan angka
        let satu = 'size';
        let dua = 'caption';

        satu = tempt ;
        satu = dua ;
        dua = tempt;

                        First class function = function class pertama
                        inti dari Javascript adalah function


                        3. Array.prototype.reduce(); => Parameternya ada 2 , argument atua paraemet 1. accoumulator yaitu hasil dari prosesnya atua hasil penjumlahannya 2. currentValue (element array yang sedang di looping) nama parameternya bebes
                        -> Menyatukan potongan tadi , bisa kita Higher order functionkan setelah di potong sama map kita gabungkan dengan .reduce(); => ini juga menghasilkan array yang baru / Melakukan sesuatu terhadap seluruh element arraynya 
                    // COntoh dari reduce
                    const angka = [-1 , 8 , 9 , 1 , 4 , -5 , -4 , 3 , 2 , 9];
                    const param = angka.reduce((accoumulator, currentValue) => accoumulator + currentValue ); => kita bisa tambahkan nilai awal di bawah contohnya
                    const param = angka.reduce((accoumulator, currentValue) => accoumulator + currentValue,10 ); => dengan kita buat atau set nilai awalnya 10 maka dia akan menambahkan 10 juga , jikahasil yang pertama itu 26 maka hasil yang ke dua adalah 36 dan defaultnya kalau tidak di tulis adalah 


    4.  Method Chaining =>menggabungkan fungsi fungsi pada Higher order function  ini dalam satu kali eksekusi tanpa disimpan dalam variable dengan titik .
                    cara pakai =>

        const hasil = angka.filter(a => a > 5) 
    .map(b => b * 3) => bisa kita bagikan lagi terserah 
    .map(b => b / 2)
    .reduce((acc , cur) => acc + cur);
    console.log(hasil);
                    Method chaining di representasikan dengan titik .''


    .concat(); => metode menggabungkan 2 buah array -> contohnya
    const gabung1 = ['sibolga','medan','bandung'];
    const gabung2 = ['jakarta','surabaya','sibuluan'];
        const gabungan = [...gabung1,...gabung2];
        console.log(gabungan);

                // kalau seperti ini , ini salah karena array dalam array dibawha conthnya
            // const gabungan = [gabung1,gabung2];
    // Sebetulnya kita bisa menggunakan method .concat(); namun dengan spread operator bisa lebih fleksibel jika kita tambahkan element baru di tengah tengah nya 
            const gabungan = gabung1.concat(gabung2);



                // COntoh lain Filtering
        function filterBy(type , ...values){
            return values.filter(v => typeof v === type);
        }

                // Tugas kita adalah mana saja dari parameter yang dikirim ke filterBy yang bentuknya angka
        console.log(filterBy('number',1,2,'Sandhika',false,10,true,'Doddy'));
         // hasilnya bisa number karena 'number' <- kita memilihnya number
                                        